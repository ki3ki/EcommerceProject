# store/models.py
from django.db import models
from django.utils import timezone
from django.utils.text import slugify

class Category(models.Model):
    name = models.CharField(max_length=255)
    description = models.TextField()
    image = models.ImageField(upload_to='category_images/', blank=True, null=True)
    is_deleted = models.BooleanField(default=False)
    slug = models.SlugField(blank=True, unique=True)

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(self.name)
            # Ensure the slug is unique
            original_slug = self.slug
            counter = 1
            while Category.objects.filter(slug=self.slug).exists():
                self.slug = f"{original_slug}-{counter}"
                counter += 1
        super().save(*args, **kwargs)

    def __str__(self):
        return self.name
    
class Brand(models.Model):
    name = models.CharField(max_length=100)

    def __str__(self):
        return self.name


class Product(models.Model):
    GENDER_CHOICES = [
        ('Men', 'Men'),
        ('Women', 'Women'),
        ('Kids', 'Kids'),
        ('Unisex', 'Unisex'),
    ]

    name = models.CharField(max_length=255)
    description = models.TextField()
    category = models.ForeignKey(Category, on_delete=models.CASCADE)
    brand = models.ForeignKey(Brand, on_delete=models.CASCADE)
    gender = models.CharField(max_length=10, choices=GENDER_CHOICES, default='Unisex')
    is_deleted = models.BooleanField(default=False)
    slug = models.SlugField(unique=True, blank=True)

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(self.name)
            # Ensure the slug is unique
            original_slug = self.slug
            counter = 1
            while Product.objects.filter(slug=self.slug).exists():
                self.slug = f"{original_slug}-{counter}"
                counter += 1
        super().save(*args, **kwargs)


    def delete(self, using=None, keep_parents=False):
        self.is_deleted = True
        self.deleted_at = timezone.now()
        self.save()

    def __str__(self):
        return self.name

class Variant(models.Model):
    product = models.ForeignKey(Product, on_delete=models.CASCADE, related_name='variants')
    
    SIZE_CHOICES = [
        ('XS', 'Extra Small'),
        ('S', 'Small'),
        ('M', 'Medium'),
        ('L', 'Large'),
        ('XL', 'Extra Large'),
        ('XXL', 'Double Extra Large'),
    ]

    COLOR_CHOICES = [
        ('Red', 'Red'),
        ('Blue', 'Blue'),
        ('Green', 'Green'),
        ('Yellow', 'Yellow'),
        ('Black', 'Black'),
        ('White', 'White'),
        # Add more colors as needed
    ]
    
    size = models.CharField(max_length=3, choices=SIZE_CHOICES)
    color = models.CharField(max_length=20, choices=COLOR_CHOICES)
    stock = models.PositiveIntegerField()
    price = models.DecimalField(max_digits=10, decimal_places=2)
    
    def __str__(self):
        return f"{self.size} / {self.color} - {self.product.name}"

class ProductImage(models.Model):
    variant = models.ForeignKey(Variant, on_delete=models.CASCADE, related_name='images')
    image = models.ImageField(upload_to='product_images/')

    def __str__(self):
        return f"Image of {self.variant.product.name
} - {self.variant.size} / {self.variant.color}"






from django import forms
from store.models import Product, Variant, ProductImage, Category
from django.forms import inlineformset_factory

class ProductForm(forms.ModelForm):
    class Meta:
        model = Product
        fields = ['name', 'description', 'category', 'gender', 'brand', 'slug']

class ProductImageForm(forms.ModelForm):
    class Meta:
        model = ProductImage
        fields = ['image']

class VariantForm(forms.ModelForm):
    class Meta:
        model = Variant
        fields = ['size', 'color', 'stock', 'price']

#VariantFormSet = modelformset_factory(Variant, form=VariantForm, extra=1)

class CategoryForm(forms.ModelForm):
    class Meta:
        model = Category
        fields = ['name', 'description', 'image']
VariantFormSet = inlineformset_factory(Product, Variant, form=VariantForm, extra=1)
ProductImageFormSet = inlineformset_factory(Variant, ProductImage, form=ProductImageForm, extra=5)

from django.contrib import admin
from .models import Category, Brand, Product, Variant, ProductImage
from django.forms import inlineformset_factory
from admin_panel.forms import ProductForm, VariantForm, ProductImageForm

# Inline formsets
VariantFormSet = inlineformset_factory(Product, Variant, form=VariantForm, extra=1)
ProductImageFormSet = inlineformset_factory(Variant, ProductImage, form=ProductImageForm, extra=3)

class ProductImageInline(admin.TabularInline):
    model = ProductImage
    formset = ProductImageFormSet
    extra = 3  # Adjust based on your needs

class VariantInline(admin.TabularInline):
    model = Variant
    formset = VariantFormSet
    extra = 1

@admin.register(Category)
class CategoryAdmin(admin.ModelAdmin):
    list_display = ['name', 'description', 'image', 'is_deleted']
    prepopulated_fields = {'slug': ('name',)}

@admin.register(Brand)
class BrandAdmin(admin.ModelAdmin):
    list_display = ['name', 'description', 'image', 'is_deleted']
    prepopulated_fields = {'slug': ('name',)}

@admin.register(Product)
class ProductAdmin(admin.ModelAdmin):
    form = ProductForm
    list_display = ['name', 'description', 'category', 'brand', 'gender', 'is_deleted']
    list_filter = ['category', 'brand', 'gender', 'is_deleted']
    prepopulated_fields = {'slug': ('name',)}
    inlines = [VariantInline, ProductImageInline]

@admin.register(Variant)
class VariantAdmin(admin.ModelAdmin):
    list_display = ['product', 'color', 'price', 'stock', 'is_deleted']
    list_filter = ['product__category', 'product__brand', 'color', 'is_deleted']

@admin.register(ProductImage)
class ProductImageAdmin(admin.ModelAdmin):
    list_display = ['product','variant', 'image', 'is_deleted']



